/*
 * Nivo Lightbox v1.0
 * http://dev7studios.com/lightbox
 *
 * Copyright 2013, Dev7studios
 * Free to use and abuse under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 */

(function(e, t, n, r) {
    function o(t, n) {
        this.el = t;
        this.$el = e(this.el);
        this.options = e.extend({}, s, n);
        this._defaults = s;
        this._name = i;
        this.init()
    }
    var i = "nivoLightbox",
        s = { effect: "fade", theme: "default", keyboardNav: true, onInit: function() {}, beforeShowLightbox: function() {}, afterShowLightbox: function(e) {}, beforeHideLightbox: function() {}, afterHideLightbox: function() {}, onPrev: function(e) {}, onNext: function(e) {}, errorMessage: "The requested content cannot be loaded. Please try again later." };
    o.prototype = {
        init: function() {
            var t = this;
            this.$el.on("click", function(e) {
                e.preventDefault();
                t.showLightbox()
            });
            if (this.options.keyboardNav) { e("body").off("keyup").on("keyup", function(n) { var r = n.keyCode ? n.keyCode : n.which; if (r == 27) t.destructLightbox(); if (r == 37) e(".lightbox-prev").trigger("click"); if (r == 39) e(".lightbox-next").trigger("click") }) }
            this.options.onInit.call(this)
        },
        showLightbox: function() {
            var t = this;
            this.options.beforeShowLightbox.call(this);
            var n = this.constructLightbox();
            if (!n) return;
            var r = n.find(".lightbox-content");
            if (!r) return;
            var i = this.$el;
            e("body").addClass("lightbox-body-effect-" + this.options.effect);
            this.processContent(r, i);
            if (this.$el.attr("data-lightbox-galeria")) {
                var t = this,
                    s = e('[data-lightbox-galeria="' + this.$el.attr("data-lightbox-galeria") + '"]');
                e(".lightbox-nav").show();
                e(".lightbox-prev").off("click").on("click", function(n) {
                    n.preventDefault();
                    var o = s.index(i);
                    i = s.eq(o - 1);
                    if (!e(i).length) i = s.last();
                    t.processContent(r, i);
                    t.options.onPrev.call(this, [i])
                });
                e(".lightbox-next").off("click").on("click", function(n) {
                    n.preventDefault();
                    var o = s.index(i);
                    i = s.eq(o + 1);
                    if (!e(i).length) i = s.first();
                    t.processContent(r, i);
                    t.options.onNext.call(this, [i])
                })
            }
            setTimeout(function() {
                n.addClass("lightbox-open");
                t.options.afterShowLightbox.call(this, [n])
            }, 1)
        },
        processContent: function(n, r) {
            var i = this;
            var s = r.attr("href");
            n.html("").addClass("lightbox-loading");
            if (this.isHidpi() && r.attr("data-lightbox-hidpi")) { s = r.attr("data-lightbox-hidpi") }
            if (s.match(/\.(jpeg|jpg|gif|png)$/) != null) {
                var o = e("<img>", { src: s });
                o.one("load", function() {
                    var r = e('<div class="lightbox-image" />');
                    r.append(o);
                    n.html(r).removeClass("lightbox-loading");
                    r.css({ "line-height": e(".lightbox-content").height() + "px", height: e(".lightbox-content").height() + "px" });
                    e(t).resize(function() { r.css({ "line-height": e(".lightbox-content").height() + "px", height: e(".lightbox-content").height() + "px" }) })
                }).each(function() { if (this.complete) e(this).load() });
                o.error(function() {
                    var t = e('<div class="lightbox-error"><p>' + i.options.errorMessage + "</p></div>");
                    n.html(t).removeClass("lightbox-loading")
                })
            } else if (video = s.match(/(youtube|youtu|vimeo)\.(com|be)\/(watch\?v=(\w+)|(\w+))/)) {
                var u = "",
                    a = "lightbox-video";
                if (video[1] == "youtube") {
                    u = "http://www.youtube.com/v/" + video[4];
                    a = "lightbox-youtube"
                }
                if (video[1] == "youtu") {
                    u = "http://www.youtube.com/v/" + video[3];
                    a = "lightbox-youtube"
                }
                if (video[1] == "vimeo") {
                    u = "http://player.vimeo.com/video/" + video[3];
                    a = "lightbox-vimeo"
                }
                if (u) {
                    var f = e("<iframe>", { src: u, "class": a, frameborder: 0, vspace: 0, hspace: 0, scrolling: "auto" });
                    n.html(f);
                    f.load(function() { n.removeClass("lightbox-loading") })
                }
            } else if (r.attr("data-lightbox-type") == "ajax") {
                var i = this;
                e.ajax({
                    url: s,
                    cache: false,
                    success: function(r) {
                        var i = e('<div class="lightbox-ajax" />');
                        i.append(r);
                        n.html(i).removeClass("lightbox-loading");
                        if (i.outerHeight() < n.height()) { i.css({ position: "relative", top: "50%", "margin-top": -(i.outerHeight() / 2) + "px" }) }
                        e(t).resize(function() { if (i.outerHeight() < n.height()) { i.css({ position: "relative", top: "50%", "margin-top": -(i.outerHeight() / 2) + "px" }) } })
                    },
                    error: function() {
                        var t = e('<div class="lightbox-error"><p>' + i.options.errorMessage + "</p></div>");
                        n.html(t).removeClass("lightbox-loading")
                    }
                })
            } else if (s.substring(0, 1) == "#") {
                if (e(s).length) {
                    var l = e('<div class="lightbox-inline" />');
                    l.append(e(s).clone().show());
                    n.html(l).removeClass("lightbox-loading");
                    if (l.outerHeight() < n.height()) { l.css({ position: "relative", top: "50%", "margin-top": -(l.outerHeight() / 2) + "px" }) }
                    e(t).resize(function() { if (l.outerHeight() < n.height()) { l.css({ position: "relative", top: "50%", "margin-top": -(l.outerHeight() / 2) + "px" }) } })
                } else {
                    var l = e('<div class="lightbox-error"><p>' + i.options.errorMessage + "</p></div>");
                    n.html(l).removeClass("lightbox-loading")
                }
            } else {
                var f = e("<iframe>", { src: s, "class": "lightbox-item", frameborder: 0, vspace: 0, hspace: 0, scrolling: "auto" });
                n.html(f);
                f.load(function() { n.removeClass("lightbox-loading") })
            }
            if (r.attr("title")) {
                var c = e("<span>", { "class": "lightbox-title" });
                c.text(r.attr("title"));
                e(".lightbox-title-wrap").html(c)
            } else { e(".lightbox-title-wrap").html("") }
        },
        constructLightbox: function() {
            if (e(".lightbox-overlay").length) return e(".lightbox-overlay");
            var t = e("<div>", { "class": "lightbox-overlay lightbox-theme-" + this.options.theme + " lightbox-effect-" + this.options.effect });
            var n = e("<div>", { "class": "lightbox-wrap" });
            var r = e("<div>", { "class": "lightbox-content" });
            var i = e('<a href="#" class="lightbox-nav lightbox-prev">Previous</a><a href="#" class="lightbox-nav lightbox-next">Next</a>');
            var s = e('<a href="#" class="lightbox-close" title="Close">Close</a>');
            var o = e("<div>", { "class": "lightbox-title-wrap" });
            var u = 0;
            if (u) t.addClass("lightbox-ie");
            n.append(r);
            n.append(o);
            t.append(n);
            t.append(i);
            t.append(s);
            e("body").append(t);
            var a = this;
            t.on("click", function(t) { if (t.target === this || e(t.target).hasClass("lightbox-content") || e(t.target).hasClass("lightbox-image")) a.destructLightbox() });
            s.on("click", function(e) {
                e.preventDefault();
                a.destructLightbox()
            });
            return t
        },
        destructLightbox: function() {
            var t = this;
            this.options.beforeHideLightbox.call(this);
            e(".lightbox-overlay").removeClass("lightbox-open");
            e(".lightbox-nav").hide();
            e("body").removeClass("lightbox-body-effect-" + t.options.effect);
            var n = 0;
            if (n) {
                e(".lightbox-overlay iframe").attr("src", " ");
                e(".lightbox-overlay iframe").remove()
            }
            e(".lightbox-prev").off("click");
            e(".lightbox-next").off("click");
            this.options.afterHideLightbox.call(this)
        },
        isHidpi: function() { var e = "(-webkit-min-device-pixel-ratio: 1.5),							  (min--moz-device-pixel-ratio: 1.5),							  (-o-min-device-pixel-ratio: 3/2),							  (min-resolution: 1.5dppx)"; if (t.devicePixelRatio > 1) return true; if (t.matchMedia && t.matchMedia(e).matches) return true; return false }
    };
    e.fn[i] = function(t) { return this.each(function() { if (!e.data(this, i)) { e.data(this, i, new o(this, t)) } }) }
})(jQuery, window, document)